### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Absent {
  content: String!
  createdAt: DateTime!
  description: String!
  id: Int!
  target: User!
  updatedAt: DateTime!
  user: User!
}

enum AccessType {
  BRONZE
  COUNSELOR
  GOLD
  HEADMASTER
  HOMEROOM
  PLUS
  SCHOOLADMINISTRATOR
  SILVER
}

type Agenda {
  content: String!
  createdAt: DateTime!
  exam: [Exam!]!
  fromDate: DateTime!
  id: Int!
  meetings: [Meeting!]!
  toDate: DateTime!
  tutoring: Tutoring
  updatedAt: DateTime!
  user: User!
  uuid: String!
}

enum AgendaAbsentTargetStatus {
  ACCEPTED
  PENDING
  REJECTED
}

type Assigment {
  assigmentsubmission: [AssigmentSubmission!]!
  classroom: Classroom!
  closeAt: DateTime!
  createdAt: DateTime!
  files: [String!]!
  filesType: [FileType!]!
  id: Int!
  name: String!
  odd: Boolean!
  subject: Subject!
  updatedAt: DateTime!
  yearEnd: Int!
  yearStart: Int!
}

type AssigmentSubmission {
  assigment: Assigment!
  createdAt: DateTime!
  editedTimes: Int!
  files: [String!]!
  filesType: [FileType!]!
  grade: Float!
  graded: Boolean!
  id: Int!
  turned: Boolean!
  turnedAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

type AuthPayload {
  message: String
  refreshToken: String
  status: Boolean
  token: String
}

type Chat {
  content: String!
  createdAt: DateTime!
  from: User!
  id: Int!
  room: Room!
  type: String!
  updatedAt: DateTime!
}

type City {
  createdAt: DateTime!
  id: Int!
  name: String!
  province: Province!
  updatedAt: DateTime!
}

type Classroom {
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type Classtype {
  createdAt: DateTime!
  id: Int!
  level: Int!
  updatedAt: DateTime!
}

type Consultation {
  consultant: User!
  content: String!
  createdAt: DateTime!
  id: Int!
  name: String!
  room: Room!
  status: Status!
  updatedAt: DateTime!
  user: User!
}

type CourseVideo {
  createdAt: DateTime!
  files: [String!]!
  filesType: [FileType!]!
  id: Int!
  name: String!
  updatedAt: DateTime!
  views: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Exam {
  agenda: Agenda!
  classroom: Classroom!
  classtype: Classtype
  createdAt: DateTime!
  description: String
  examplayers: [Examplay!]!
  examsessions: [Examsession!]!
  hint: String
  id: Int!
  name: String!
  odd: Boolean!
  questions: [Question!]!
  showResult: Boolean!
  shuffle: Boolean!
  subject: Subject!
  supervisors: [User!]!
  timeLimit: String!
  updatedAt: DateTime!
  yearEnd: Int
  yearStart: Int
}

type Examplay {
  createdAt: DateTime!
  finishAt: DateTime
  grade: Float!
  graded: Boolean!
  id: Int!
  lastActivity: DateTime!
  score: Int!
  startAt: DateTime!
  timePassed: Int!
  updatedAt: DateTime!
  user: User!
}

type Examsession {
  closeAt: DateTime!
  createdAt: DateTime!
  exam: Exam!
  examplayers: [Examplay!]!
  id: Int!
  name: String!
  openAt: DateTime!
  token: String!
  updatedAt: DateTime!
}

type FileDocument {
  compressedSize: Int!
  context: String
  createdAt: DateTime!
  extensions: String!
  fileId: String!
  fileName: String!
  fileType: FileType!
  id: Int!
  originalSize: Int!
  referencePath: String
  storage: Storage!
  targetId: Int
  targetType: String
  updatedAt: DateTime!
  user: User!
}

enum FileType {
  AUDIO
  EXCEL
  IMAGE
  PDF
  VIDEO
  WORD
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Meeting {
  classroom: Classroom!
  contentId: String
  contentText: String
  contentType: MeetingContentType!
  createdAt: DateTime!
  documents: [String!]!
  filesTypes: [String!]!
  finishAt: DateTime
  id: Int!
  name: String!
  room: [Room!]!
  startAt: DateTime!
  updatedAt: DateTime!
  user: User!
  uuid: String!
}

enum MeetingContentType {
  MEDIA
  WHITEBOARD
  YOUTUBE
}

type Mutation {
  login(password: String!, username: String!): AuthPayload
  register(address: String!, cityId: Int!, classtypeId: Int, email: String!, identityNumber: String, name: String!, nisn: String, password: String!, phone: String!, provinceId: Int!, roles: Roles!, schoolId: Int, username: String!): AuthPayload
}

type Notification {
  context: String!
  contextContent: String!
  createdAt: DateTime!
  id: Int!
  message: String!
  pictureId: String!
  updatedAt: DateTime!
  user: User!
}

type Packagequestion {
  classtype: Classtype!
  coverId: String!
  createdAt: DateTime!
  id: Int!
  questions: [Question!]!
  subject: Subject!
  updatedAt: DateTime!
  user: User!
  visibility: Visibility!
}

enum PaymentMethod {
  BALANCE
  XENDIT
}

type Post {
  content: String!
  createdAt: DateTime!
  id: Int!
  pictureId: String!
  school: School
  title: String!
  type: PostType!
  updatedAt: DateTime!
  user: User!
}

enum PostType {
  ANNOUNCEMENT
  NEWS
}

type Province {
  cities: [City!]!
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type Query {
  me: User
}

type Question {
  answers: [String!]!
  answersDocuments: [String!]!
  answersTypes: [String!]!
  classtype: Classtype!
  correctAnswerIndex: Int!
  createdAt: DateTime!
  files: [String!]!
  filesType: [FileType!]!
  id: Int!
  subject: Subject!
  updatedAt: DateTime!
  user: User!
  visibility: Visibility!
}

type Quiz {
  coverId: String!
  createdAt: DateTime!
  difficulty: QuizDifficulty!
  id: Int!
  name: String!
  playedCount: Int!
  questions: [Question!]!
  subject: Subject!
  updatedAt: DateTime!
  user: User!
  visibility: Visibility!
}

enum QuizDifficulty {
  EASY
  HARD
  MEDIUM
}

type Quizmatch {
  createdAt: DateTime!
  finishAt: DateTime
  id: Int!
  password: String
  quiz: Quiz!
  quizplayers: [Quizplayer!]!
  room: Room!
  startAt: DateTime
  updatedAt: DateTime!
  user: User!
}

type Quizplayer {
  createdAt: DateTime!
  id: Int!
  quiz: Quiz!
  quizmatch: Quizmatch!
  score: Int!
  streak: Int!
  updatedAt: DateTime!
  user: User!
}

type Report {
  content: String!
  createdAt: DateTime!
  id: Int!
  name: String!
  receiver: User!
  room: Room
  status: Status!
  subject: String!
  updatedAt: DateTime!
  user: User!
}

enum Roles {
  ADMIN
  GENERAL
  PARENT
  STUDENT
  TEACHER
}

type Room {
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  user: User!
}

type School {
  address: String!
  city: City!
  createdAt: DateTime!
  id: Int!
  name: String!
  npsn: String!
  province: Province!
  updatedAt: DateTime!
}

enum Status {
  ACTIVE
  INACTIVE
  SETTLED
}

enum Storage {
  CLOUD
  LOCAL
}

type Subject {
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type Transaction {
  amount: Float!
  content: String
  createdAt: DateTime!
  description: String!
  discount: Float!
  extraContent: String
  id: Int!
  paid: Boolean!
  paymentMethod: PaymentMethod!
  paymentUrl: String
  purchaseId: Int
  purchaseType: String
  status: TransactionStatus!
  target: User!
  tax: Float!
  updatedAt: DateTime!
  user: User!
  uuid: String!
  voucher: Voucher!
}

enum TransactionStatus {
  FAILED
  PENDING
  SUCCESS
}

type Tutoring {
  address: String!
  approved: Boolean!
  finishAt: DateTime!
  id: Int!
  notes: String!
  rate: Float!
  rejectedReason: String!
  room: Room
  startAt: DateTime!
  status: Status!
  teacher: User!
  user: User!
}

type User {
  address: String!
  balance: Float!
  city: City!
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String!
  phone: String!
  province: Province!
  school: School
  updatedAt: DateTime!
  username: String!
}

enum Visibility {
  PRIVATE
  PUBLIC
  SELECT
}

type Voucher {
  code: String!
  createdAt: DateTime!
  expiredAt: DateTime!
  id: Int!
  name: String!
  percentage: Float!
  updatedAt: DateTime!
}

type Withdraw {
  amount: Float!
  content: String
  createdAt: DateTime!
  extraContent: String
  id: Int!
  paid: Boolean!
  status: TransactionStatus!
  tax: Float!
  updatedAt: DateTime!
  user: User!
  uuid: String!
}